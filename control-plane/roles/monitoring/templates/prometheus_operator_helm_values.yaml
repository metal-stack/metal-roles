fullnameOverride: "prometheus"
commonLabels:
  group: {{ environment_name }}
defaultRules:
  rules:
    etcd: false
    kubeApiserver: false
    kubeApiserverAvailability: false
    kubeApiserverSlos: false
alertmanager:
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: "{{ monitoring_slack_url }}"
    route:
      group_wait: 2m
      group_interval: 15m
      group_by: ['...']
      repeat_interval: 120h
      receiver: 'null'
      routes:
        - match_re:
            severity: 'critical'
          receiver: 'alertlogger'
          continue: true
        - match_re:
            job: '.*'
          receiver: 'alertlogger'
          continue: true
        - match_re:
            pod: '(reserve-excess|Watchdog|stackdriver|heapster)'
          receiver: 'null'
        - match_re:
            deployment: '(reserve-excess|stackdriver|heapster)'
          receiver: 'null'
        - receiver: 'zis-proxy'
          matchers:
            - severity="critical"
          continue: true
        - match_re:
            severity: 'critical'
          receiver: 'slack'
          continue: true
        - match_re:
            severity: 'critical'
          receiver: 'rocketchat'
          continue: true
    inhibit_rules:
    - source_match:
        alertname: 'Watchdog'
      target_match_re:
        pod: 'reserve-excess.*'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match_re:
        pod: 'prometheus-to-sd.*'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match_re:
        pod: 'metrics-server.*'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match_re:
        pod: 'heapster.*'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match_re:
        pod: 'stackdriver.*'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match:
        deployment: '(reserve-excess|heapster|stackdriver)'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match:
        alertname: 'KubeApiServerTooManyAuditlogFailures'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match:
        alertname: 'PrometheusOutOfOrderTimestamps'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match:
        alertname: '"KubeHpaMaxedOut"'
      equal: ['prometheus']
    - source_match:
        alertname: 'Watchdog'
      target_match:
        alertname: 'etcdHighNumberOfFailedGRPCRequests'
      equal: ['prometheus']
    - source_match:
        alertname: 'InternetUplinkDown'
      target_match_re:
        alertname: '(EndpointDown)'
      equal: ['partition']
    receivers:
    - name: 'slack'
      slack_configs:
      - channel: {{ monitoring_slack_channel | b64decode }}
        send_resolved: true
        title: |-
{%raw%}
          {{ .GroupLabels.alertname }}
          {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
            {{" "}}(
            {{- with .CommonLabels.Remove .GroupLabels.Names }}
              {{- range $index, $label := .SortedPairs -}}
                {{ if (and (ne $label.Name "mc_tool_rule") (and (ne $label.Name "job") (and (ne $label.Name "service") (and (ne $label.Name "endpoint") (ne $label.Name "prometheus"))))) -}}
                  {{- if $index }}, {{ end -}}
                  {{- $label.Name }}="{{ $label.Value -}}"
                {{- end }}
              {{- end }}
            {{- end -}}
            )
          {{- end }}
        text: >-
          {{ with index .Alerts 0 -}}
            :chart_with_upwards_trend: *<{{ .GeneratorURL }}|Graph>*
            {{- if .Annotations.runbook }}   :notebook: *<{{ .Annotations.runbook }}|Runbook>*{{ end }}
          {{ end }}
          *Alert details*:
          {{ range .Alerts -}}
            *Alert:* {{ .Labels.alertname }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
          {{ if .Annotations.description }}*Description:* {{ .Annotations.description }}{{end}}
          {{ if .Annotations.summary }}*Summary:* {{ .Annotations.summary }}{{end}}
          *Details:*
            {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}
{%endraw%}
    - name: 'null'
    - name: 'alertlogger'
      webhook_configs:
        - url: http://alertlogger:5001
    - name: zis-proxy
      webhook_configs:
      - url: {{ monitoring_zis_webhook_url }}
        send_resolved: true
        http_config:
          basic_auth:
            username: {{ monitoring_zis_webhook_user }}
            password: {{ monitoring_zis_webhook_password }}
          tls_config:
            insecure_skip_verify: true
    - name: rocketchat
{% if environment_name == 'prod' %}
      webhook_configs:
      - send_resolved: true
        url: https://chat.fits.cloud/hooks/ZMYAhWFThD2MarSoR/qiJBNkGAS7qyooF5c9dnvxAnFB7urwzEaeC23tPZnp7Q2HcK
{% endif %}
    templates:
    - '/etc/alertmanager/config/*.tmpl'

  alertmanagerSpec:
    secrets:
      - "alertmanager-client-tls"
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    externalUrl: "https://alerts.{{ metal_control_plane_ingress_dns }}/"

grafana:
  defaultDashboardsTimezone: browser
  adminPassword: {{ monitoring_grafana_admin_password }}
  sidecar:
    dashboards:
      multicluster:
        global:
          enabled: true
    datasources:
      defaultDatasourceEnabled: false
  additionalDataSources:
  - name: Thanos
    type: prometheus
    access: proxy
    orgId: 1
    url: http://thanos-query:10902
    isDefault: true
  - name: AlertManager
    type: camptocamp-prometheus-alertmanager-datasource
    url: http://prometheus-alertmanager:9093/
    access: proxy
    jsonData:
      severity_critical: "critical"
      severity_high: "high"
      severity_warning: "warning"
      severity_info: "info1"
  - name: Loki
    type: loki
    url: http://loki:3100/
    access: proxy
    orgId: 1
    version: 1
    jsonData:
      maxLines: 1000
  plugins:
  - camptocamp-prometheus-alertmanager-datasource

{% if monitoring_grafana_persistence_enabled is defined and monitoring_grafana_persistence_enabled %}
  persistence:
    enabled: "true"
    type: "statefulset"
{% endif %}

{% if environment_name == 'test' %}
  grafana.ini:
    server:
      root_url: "https://grafana.{{ metal_control_plane_ingress_dns }}/"
    auth.generic_oauth:
      enabled: true
      client_id: grafana.metal-stack.dev
      client_secret: {{ monitoring_grafana_keycloak_secret }}
      scopes: email profile
      auth_url: https://oidc.test.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/auth
      token_url: https://oidc.test.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/token
      api_url: https://oidc.test.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/userinfo
      allow_sign_up: true
      email_attribute_name: email
      role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
{% endif %}

{% if environment_name == 'prod' %}
  grafana.ini:
    server:
      root_url: "https://grafana.{{ metal_control_plane_ingress_dns }}/"
    auth.generic_oauth:
      enabled: true
      client_id: grafana.fits.cloud
      client_secret: {{ monitoring_grafana_keycloak_secret }}
      scopes: email profile
      auth_url: https://oidc.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/auth
      token_url: https://oidc.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/token
      api_url: https://oidc.fits.cloud/auth/realms/fits-cloudnative-fits/protocol/openid-connect/userinfo
      allow_sign_up: true
      email_attribute_name: email
      role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
{% endif %}
kubeApiServer:
  enabled: false
kubeControllerManager:
  enabled: false
coreDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
kube-state-metrics:
  namespaceOverride: "{{ k8s_monitoring_namespace }}"
prometheusOperator:
  thanosImage:
    tag: {{ monitoring_thanos_version }}
prometheus:
  prometheusSpec:
    externalLabels:
      cluster: {{ environment_name }}
    externalUrl: "https://thanos.{{ metal_control_plane_ingress_dns }}"
    ruleSelector:
      matchLabels:
        release: prometheus
    retention: 1d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    additionalScrapeConfigsSecret:
      enabled: true
      name: prometheus-prometheus-scrape-confg
      key: additional-scrape-configs.yaml
    additionalAlertRelabelConfigs:
    - source_labels: [mc_tool_rule]
      target_label: mc_tool_rule
      regex: ()
      replacement: "PROM.FITS.NATIVECLOUD.KUBERNETES.5"
    - source_labels: [tenant]
      target_label: tenant
      regex: ()
      replacement: "CN"
    - regex: 'prometheus'
      action: labeldrop
    - regex: 'endpoint'
      action: labeldrop
    thanos:
      version: {{ monitoring_thanos_version }}
      objectStorageConfig:
        key: thanos.yaml
        name: thanos-objstore-config
