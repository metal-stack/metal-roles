---
prometheus:
  ingress:
    enabled: {{ monitoring_prometheus_ingress_enabled }}
    ingressClassName: nginx
    hosts:
      - {{ monitoring_prometheus_ingress_dns }}
{% if monitoring_additional_ingress_annotations %}
    annotations:
{% for key, value in monitoring_additional_ingress_annotations.items() %}
      {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}

  prometheusSpec:
{% if monitoring_prometheus_image_tag is defined %}
    image:
      tag: "{{ monitoring_prometheus_image_tag }}"
{% endif %}
{% if monitoring_prometheus_storage_spec is defined %}
    storageSpec:
      {{ monitoring_prometheus_storage_spec | indent(6) }}
{% endif %}
    thanos:
      image: "{{ thanos_image_name }}:{{ thanos_image_tag }}"
      version: "{{ thanos_image_tag }}"
{% if monitoring_thanos_object_store_config is defined %}
      objectStorageConfig:
        key: objstore.yml
        name: thanos-objstore-secret
{% endif %}
  thanosService:
    enabled: true

grafana:
  adminPassword: {{ monitoring_grafana_admin_password }}
  defaultDashboardsTimezone: {{ monitoring_grafana_dashboard_timezone }}

  additionalDataSources: {{ monitoring_grafana_additional_datasources | to_json }}
  grafana.ini:
    server:
{% if monitoring_ingress_grafana_tls %}
      root_url: https://{{ monitoring_grafana_ingress_dns }}
{% else %}
      root_url: http://{{ monitoring_grafana_ingress_dns }}
{% endif %}
{% if monitoring_grafana_github_oauth %}
    auth.github: {{ monitoring_grafana_github_oauth | to_json }}
{% endif %}
{% if monitoring_grafana_extra_secret_mounts %}
  extraSecretMounts: {{ monitoring_grafana_extra_secret_mounts | to_json }}
{% endif %}
  sidecar:
    datasources:
      uid: prometheus
      url: http://thanos-query-frontend:9090
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - {{ monitoring_grafana_ingress_dns }}
{% if monitoring_ingress_grafana_tls %}
    tls:
      - secretName: monitoring-ingress-tls
        hosts:
        - {{ monitoring_grafana_ingress_dns }}
{% endif %}
{% if monitoring_ingress_grafana_tls or monitoring_additional_ingress_annotations %}
    annotations:
{% endif %}
{% if monitoring_ingress_grafana_tls %}
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
{% endif %}
{% if monitoring_additional_ingress_annotations %}
{% for key, value in monitoring_additional_ingress_annotations.items() %}
      {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}

alertmanager:
  alertmanagerSpec:
    logLevel: debug
    containers:
    - name: webhook-logger
      image: {{ webhook_logger_image_name }}:{{ webhook_logger_image_tag }}
      ports:
      - containerPort: 8000
        name: webhook-logger
      readinessProbe:
        httpGet:
          path: /ready
          port: webhook-logger
  config:
    global:
      resolve_timeout: 5m
{% if monitoring_slack_api_url is defined %}
      slack_api_url: "{{ monitoring_slack_api_url }}"
{% endif %}
    inhibit_rules: []
    route:
      receiver: webhook-logger
      group_by: ['severity', 'alertname', 'namespace', 'pod', 'job'] 
      group_wait: 30s
      group_interval: 30s
      repeat_interval: 30s
      routes:
      - receiver: 'null'
        matchers:
          - alertname=~"Watchdog|InfoInhibitor"
{% if monitoring_slack_api_url is defined and monitoring_slack_notification_channel is defined %}
      - receiver: slack
        continue: true
{% endif %}
    receivers:
    - name: webhook-logger
      webhook_configs:
      - url: http://localhost:8000/alerts
        send_resolved: true
        max_alerts: 0 # 0=all alerts
    - name: 'null'
{% if monitoring_slack_api_url is defined and monitoring_slack_notification_channel is defined %}
    - name: slack
      slack_configs:
      - channel: "{{ monitoring_slack_notification_channel }}"
        send_resolved: true
{% if monitoring_slack_notification_icon_url is defined %}
        icon_url: "{% monitoring_slack_notification_icon_url %}"
{% endif %}
{% if monitoring_slack_notification_title is defined %}
        title: "{% monitoring_slack_notification_title %}"
{% endif %}
{% if monitoring_slack_notification_text is defined %}
        text: "{% monitoring_slack_notification_text %}"
{% endif %}
{% endif %}
    templates:
    - '/etc/alertmanager/config/*.tmpl'

kubeProxy:
  enabled: false

kubeScheduler:
  enabled: false

kubeEtcd:
  enabled: false

kubeControllerManager:
  enabled: false
