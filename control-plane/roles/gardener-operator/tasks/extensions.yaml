---
- name: "Register extension provider metal"
  k8s:
    definition: "{{ lookup('template', 'extensions/provider-metal.yaml', split_lines=False) }}"
    apply: yes
  when: gardener_extension_provider_metal_enabled

# - name: "Register controller: provider gcp (backups only)"
#   k8s:
#     definition: "{{ lookup('template', 'provider-gcp/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   tags: provider-gcp
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_provider_gcp_enabled

# - name: "Register controller: os extension provider metal"
#   k8s:
#     definition: "{{ lookup('template', 'os-metal-extension/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_os_metal_enabled

# - name: "Register controller: networking calico"
#   k8s:
#     definition: "{{ lookup('template', 'networking-calico/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_networking_calico_enabled

# - name: "Register controller: networking cilium"
#   k8s:
#     definition: "{{ lookup('template', 'networking-cilium/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_networking_cilium_enabled

# - name: "Register controller: shoot-cert-service"
#   k8s:
#     definition: "{{ lookup('template', 'shoot-cert-service/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   tags: shoot-cert-service
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_shoot_cert_service_enabled

# - name: "Register controller: shoot-dns-service"
#   k8s:
#     definition: "{{ lookup('template', 'shoot-dns-service/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   tags: shoot-dns-service
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_shoot_dns_service_enabled

# - name: "Register controller: dns powerdns"
#   k8s:
#     definition: "{{ lookup('template', 'powerdns/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_dns_powerdns_enabled

- name: "Register extension dns powerdns"
  k8s:
    definition: "{{ lookup('template', 'extensions/dns-powerdns.yaml', split_lines=False) }}"
    apply: yes
  when: gardener_extension_dns_powerdns_enabled

# - name: "Register controller: backup s3"
#   k8s:
#     definition: "{{ lookup('template', 'backup-s3/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   tags: shoot-dns-service
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_backup_s3_enabled

- name: "Register extension backup s3"
  k8s:
    definition: "{{ lookup('template', 'extensions/backup-s3.yaml', split_lines=False) }}"
    apply: yes
  when: gardener_extension_backup_s3_enabled

# - name: "Register controller: csi-driver-lvm"
#   k8s:
#     definition: "{{ lookup('template', 'csi-driver-lvm/{{ item }}', split_lines=False) }}"
#     kubeconfig: "{{ gardener_kube_apiserver_kubeconfig_path }}"
#     apply: yes
#   tags: csi-driver-lvm
#   register: result
#   until: result is success
#   retries: 10
#   delay: 6
#   loop:
#     - controller-deployment.yaml
#     - controller-registration.yaml
#   when: gardener_extension_csi_driver_lvm_enabled
