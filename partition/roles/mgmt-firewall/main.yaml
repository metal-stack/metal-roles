---
- name: Configure LAN interfaces dynamically without overwriting existing ones
  hosts: router
  gather_facts: no

  tasks:
    - name: Remove old SSH key from known_hosts
      ansible.builtin.raw: |
        ssh-keygen -R "{{ ansible_host }}"
      delegate_to: localhost
      ignore_errors: yes

    - name: Add new SSH key to known_hosts
      ansible.builtin.raw: |
        ssh-keyscan -H "{{ ansible_host }}" >> ~/.ssh/known_hosts
      delegate_to: localhost
      ignore_errors: yes

    - name: Setup BGP
      ansible.builtin.raw: |
        uci set bgp.bgp.enable='1'
        uci set bgp.bgp.enabled_vty='1'
        uci set bgp.general.enabled='1'
        uci add_list bgp.general.redistribute='static' 
        uci add_list bgp.general.redistribute='connected'
        uci add_list bgp.general.redistribute='kernel'
        uci set bgp.general.id={{bgp_general_ip}} 
        uci set bgp.general.deterministic_med='0'
        uci set bgp.general.as='4200000101'
        uci set bgp.general.ebgp_requires_policy='1'
        uci set bgp.mgmtsrv=bgp_peer
        uci set bgp.mgmtsrv.instance='general'
        uci set bgp.mgmtsrv.default_originate='0'
        uci set bgp.mgmtsrv.ipaddr={{ bgp_mgmtsrv_ipaddr }}
        uci set bgp.mgmtsrv.as='4200000001'
        uci set bgp.mgmtsrv.enabled='1'
        uci commit bgp
        /etc/init.d/frr restart

    - name: Setup BGP
      ansible.builtin.raw: |
        uci set bgp.bgp.enable='1'
        uci set bgp.bgp.enabled_vty='1'
        uci set bgp.general.enabled='1'
        uci add_list bgp.general.redistribute='static' 
        uci add_list bgp.general.redistribute='connected'
        uci add_list bgp.general.redistribute='kernel'
        uci set bgp.general.id={{bgp_general_ip}} 
        uci set bgp.general.deterministic_med='0'
        uci set bgp.general.as='4200000101'
        uci set bgp.general.ebgp_requires_policy='1'
        uci set bgp.mgmtsrv=bgp_peer
        uci set bgp.mgmtsrv.instance='general'
        uci set bgp.mgmtsrv.default_originate='0'
        uci set bgp.mgmtsrv.ipaddr={{ bgp_mgmtsrv_ipaddr }}
        uci set bgp.mgmtsrv.as='4200000001'
        uci set bgp.mgmtsrv.enabled='1'
        uci commit bgp
        /etc/init.d/frr restart

    - name: Setup dropbear
      ansible.builtin.raw: |
        uci set dropbear.@dropbear[0].PasswordAuth='on'
        uci set dropbear.@dropbear[0]._sshWanAccess='1'
        uci set dropbear.@dropbear[0].enable_key_ssh='1'
        uci set dropbear.@dropbear[0].RootPasswordAuth='0'
        uci delete dropbear.@dropbear[0].BannerFile
        uci commit dropbear
        /etc/init.d/dropbear restart

    - name: Setup firewall
      ansible.builtin.raw: |
        uci set firewall.1.input='DROP'
        uci set firewall.1.drop_invalid='1'
        uci set firewall.1.forward='DROP'
        uci set firewall.2.masq='1'
        uci set firewall.2.mtu_fix='1'
        uci set firewall.3.input='DROP'
        uci set firewall.3.forward='DROP'
        uci set firewall.A_BGP=rule
        uci set firewall.A_BGP.enabled='1'
        uci set firewall.A_BGP.src='wan'
        uci set firewall.A_BGP.name='Allow-BGP-WAN-traffic'
        uci set firewall.A_BGP.target='ACCEPT'
        uci set firewall.A_BGP.dest_port='179'
        uci set firewall.A_BGP.proto='tcp' 'udp'
        uci commit firewall
        /etc/init.d/firewall restart

    - name: Setup network
      ansible.builtin.raw: |
        uci set network.@switch_vlan[0].ports='0t 4'
        uci set network.@switch_vlan[1].ports='0t 5'
        uci set network.@switch_vlan[2]=switch_vlan
        uci set network.@switch_vlan[2].device='switch0'
        uci set network.@switch_vlan[2].vlan='3'
        uci set network.@switch_vlan[2].vid='3'
        uci set network.@switch_vlan[2].ports='0t 1'
        uci set network.@switch_vlan[3]=switch_vlan
        uci set network.@switch_vlan[3].device='switch0'
        uci set network.@switch_vlan[3].vlan='4'
        uci set network.@switch_vlan[3].vid='4'
        uci set network.@switch_vlan[3].ports='0t 2'
        uci set network.@switch_vlan[4]=switch_vlan
        uci set network.@switch_vlan[4].device='switch0'
        uci set network.@switch_vlan[4].vlan='5'
        uci set network.@switch_vlan[4].vid='5'
        uci set network.@switch_vlan[4].ports='0t 3'
        uci commit network
        /etc/init.d/network restart

    - name: Get the total number of sms_utils rules
      ansible.builtin.raw: |
        uci show sms_utils | grep -o '@rule\[[0-9]\+\]' | sort -u | wc -l
      register: rule_count

    - name: Disable all sms_utils rules
      ansible.builtin.raw: |
        uci set sms_utils.@rule[{{ item }}].enabled='0'
      loop: '{{ range(0, rule_count.stdout | int) }}'
      register: disable_output

    - name: Commit and restart sms_utils after disabling rules
      ansible.builtin.raw: |
        uci commit sms_utils
        /etc/init.d/sms_utils restart

    - name: Disable rms_connect
      ansible.builtin.raw: |
        uci set rms_mqtt.rms_connect_mqtt.enable='0'
        uci commit rms_mqtt
        /etc/init.d/rms_mqtt restart

    - name: Change location Name
      ansible.builtin.raw: |
        uci set snmpd.@system[0].sysName={{location_name}}  
        uci set system.system.devicename='mgmtfw01'
        uci set system.system.hostname='fel-wps-placeholder'
        uci set system.system.zoneName='Europe/Berlin'
        uci set system.system.timezone='CET-1CEST,M3.5.0,M10.5.0/3'
        uci commit snmpd
        uci commit system
        /etc/init.d/system restart

    - name: Setup Https
      ansible.builtin.raw: |
        uci set uhttpd.main._httpsWanAccess='1'
        uci set uhttpd.main.redirect_https='0'
        uci commit uhttpd
        /etc/init.d/uhttpd restart

    - name: Disable wireless
      ansible.builtin.raw: |
        uci set wireless.default_radio1.disabled='1'
        uci set wireless.default_radio0.disabled='1'
        uci commit wireless
        /etc/init.d/network restart

    - name: Create authorized keys file in /etc/dropbear
      ansible.builtin.raw: |
        echo 'Insert public key here' > ../etc/dropbear/authorized_keys

    - name: Configure new LAN interface
      ansible.builtin.raw: |
        ipaddr="{{ item.ipaddr }}"
        name="{{ item.name }}"
        device="{{ item.device }}"
        section_id=$(uci add network interface) 
        uci set network.${section_id}.proto='static'
        uci set network.${section_id}.area_type='lan'
        uci set network.${section_id}.ipaddr="${ipaddr}"
        uci set network.${section_id}.name="${name}"
        uci set network.${section_id}.delegate='1'
        uci set network.${section_id}.force_link='1'
        uci set network.${section_id}.netmask='255.255.255.252'
        uci commit network
        /etc/init.d/network restart
      loop: '{{ lan_interfaces }}'
      loop_control:
        index_var: index
      become: true
