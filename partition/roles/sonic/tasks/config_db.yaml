---
- name: Check if factory reset is required
  set_fact:
    perform_factory_reset: "{{ sonic_reset_factory | default(false) }}"

# Only run these tasks when factory reset is requested
- name: Remove existing config_db.json
  ansible.builtin.file:
    path: /etc/sonic/config_db.json
    state: absent
  when: perform_factory_reset

- name: Run config-setup factory
  ansible.builtin.command: config-setup factory
  args:
    chdir: /etc/sonic
  when: perform_factory_reset

- name: Reload config from config_db.json
  ansible.builtin.command: config reload /etc/sonic/config_db.json -y -f
  async: 120
  poll: 0
  when: perform_factory_reset

# Skip all other tasks if factory reset is requested
- name: Check mandatory variables on non-empty sonic_ports are set
  assert:
    fail_msg: "default port configuration is necessary on non-empty sonic_ports"
    quiet: yes
    that:
     - sonic_ports_default_speed
     - sonic_ports_default_mtu
  when: 
    - not perform_factory_reset
    - sonic_ports is defined and sonic_ports

- name: Check mandatory variables on non-empty sonic_portchannels are set
  assert:
    fail_msg: "default configuration is necessary on non-empty sonic_portchannels"
    quiet: yes
    that:
     - sonic_portchannels_default_mtu
  when: 
    - not perform_factory_reset
    - sonic_portchannels is defined and sonic_portchannels

- name: Populate sonic_ports_dict
  set_fact:
    sonic_ports_dict: "{{ sonic_ports_dict|default({}) | combine( {item.name: item} ) }}"
  loop: "{{ sonic_ports }}"
  when: not perform_factory_reset

- name: Configure breakouts
  command: "config interface breakout --yes {{ item.key }} '{{ item.value }}'"
  register: breakout_result
  changed_when: "'Breakout process got successfully completed.' in breakout_result.stdout"
  failed_when: "breakout_result.rc != 0 or 'Dependencies Exist. No further action will be taken' in breakout_result.stdout"
  with_dict: "{{ sonic_breakouts }}"
  when: 
    - not perform_factory_reset
    - sonic_breakouts is defined

- name: Delete deprecated metal.yaml
  ansible.builtin.file:
    path: "/etc/sonic/metal.yaml"
    state: absent
  when: not perform_factory_reset

- name: Get running configuration
  ansible.builtin.command: show runningconfiguration all
  register: sonic_running_cfg_result
  changed_when: false
  when: not perform_factory_reset

- name: Parse running configuration
  ansible.builtin.set_fact:
    sonic_running_cfg: "{{ sonic_running_cfg_result.stdout | from_json }}"
  when: not perform_factory_reset

- name: Extract running configuration for breakouts and ports
  ansible.builtin.set_fact:
    sonic_running_cfg_breakouts: "{{ sonic_running_cfg | community.general.json_query('BREAKOUT_CFG') }}"
    sonic_running_cfg_hwsku: "{{ sonic_running_cfg | community.general.json_query('DEVICE_METADATA.localhost.hwsku') }}"
    sonic_running_cfg_mac: "{{ sonic_running_cfg | community.general.json_query('DEVICE_METADATA.localhost.mac') }}"
    sonic_running_cfg_platform: "{{ sonic_running_cfg | community.general.json_query('DEVICE_METADATA.localhost.platform') }}"
    sonic_running_cfg_ports: "{{ sonic_running_cfg | community.general.json_query('PORT') }}"
  when: not perform_factory_reset

- name: Fail if running configuration doesn't contain required information
  ansible.builtin.assert:
    that:
     - sonic_running_cfg_hwsku
     - sonic_running_cfg_mac
     - sonic_running_cfg_platform
     - sonic_running_cfg_ports
    fail_msg: The running configuration is incomplete because it does not contain 'PORT' or complete 'DEVICE_METADATA'.
  when: not perform_factory_reset

- name: Fail if running configuration doesn't contain breakout configuration
  ansible.builtin.assert:
    that:
     - sonic_running_cfg_breakouts
    fail_msg: The running configuration is incomplete because it does not contain 'BREAKOUT_CFG'.
  when: 
    - not perform_factory_reset
    - sonic_breakouts is defined

- name: Render config_db
  set_fact:
    config_db: "{{ lookup('template', 'metal.yaml.j2') }}"
  when: not perform_factory_reset

- name: Save config_db as JSON file
  copy:
    content: "{{ config_db | from_yaml | to_nice_json }}"
    dest: /etc/sonic/config_db.json
  notify: "config {{ sonic_config_action }}"
  when: not perform_factory_reset