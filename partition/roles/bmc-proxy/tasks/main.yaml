---
- name: Check mandatory variables for this role are set
  assert:
    fail_msg: "not all mandatory variables given, check role documentation"
    quiet: yes
    that:
      - bmc_proxy_image_name is defined
      - bmc_proxy_image_tag is defined
      - bmc_reverse_proxy_image_name is defined
      - bmc_reverse_proxy_image_tag is defined

- name: Obtain docker bridge ip
  command: docker network inspect bridge
  register: docker_inspect_result
  when: bmc_proxy_docker_bridge_ip is not none

- name: Set docker bridge ip
  set_fact:
    bmc_proxy_docker_bridge_ip: "{{ (docker_inspect_result | from_json)[0].get("IPAM").get("Config")[0].get("Gateway") }}"
  when: bmc_proxy_docker_bridge_ip is not none

- name: create bmc-proxy host directory
  file:
    dest: "{{ bmc_proxy_host_dir_path }}"
    state: directory
    owner: "{{ bmc_proxy_cert_owner }}"
    group: "{{ bmc_proxy_cert_group }}"
    mode: 0755

- name: copy bmc-reverse-proxy nginx.conf
  copy:
    src: nginx.conf
    dest: "{{ bmc_proxy_host_dir_path }}/"
    mode: 0644
    owner: "{{ bmc_proxy_cert_owner }}"
    group: "{{ bmc_proxy_cert_group }}"

- name: create bmc-proxy certificates directory
  file:
    dest: "{{ bmc_proxy_cert_dir_path }}"
    state: directory
    owner: "{{ bmc_proxy_cert_owner }}"
    group: "{{ bmc_proxy_cert_group }}"
    mode: 0700

- name: copy ca certificates
  copy:
    dest: "{{ bmc_proxy_cert_dir_path }}/ca.pem"
    content: "{{ metal_api_bmc_proxy_certs_ca_cert }}"
    mode: 0640
    owner: "{{ bmc_proxy_cert_owner }}"
    group: "{{ bmc_proxy_cert_group }}"

- name: copy bmc-proxy certificates
  copy:
    dest: "{{ bmc_proxy_cert_dir_path }}/{{ item.filename }}"
    content: "{{ item.content }}"
    mode: 0640
    owner: "{{ bmc_proxy_cert_owner }}"
    group: "{{ bmc_proxy_cert_group }}"
  no_log: yes
  loop:
    - filename: server.pem
      content: "{{ metal_api_bmc_proxy_certs_server_cert }}"
    - filename: server-key.pem
      content: "{{ metal_api_bmc_proxy_certs_server_key }}"
  loop_control:
    label: "{{ item.filename }}"

- name: Deploy bmc-proxy service
  include_role:
    name: ansible-common/roles/systemd-docker-service
  vars:
    systemd_service_name: bmc-proxy
    systemd_docker_image_name: "{{ bmc_proxy_image_name }}"
    systemd_docker_image_tag: "{{ bmc_proxy_image_tag }}"
    systemd_docker_volumes:
      - "{{ bmc_proxy_cert_dir_path }}/server-key.pem:/server-key.pem"
    systemd_docker_ports:
      - host_port: "{{ bmc_proxy_port }}"
        target_port: 4444
    systemd_service_environment:
      BMC_PROXY_PORT: 4444

- name: Deploy bmc-reverse-proxy service
  include_role:
    name: ansible-common/roles/systemd-docker-service
  vars:
    systemd_service_name: bmc-reverse-proxy
    systemd_docker_image_name: "{{ bmc_reverse_proxy_image_name }}"
    systemd_docker_image_tag: "{{ bmc_reverse_proxy_image_tag }}"
    systemd_service_environment:
      ZAP_LEVEL: info
    systemd_docker_volumes:
      - "{{ bmc_proxy_host_dir_path }}/nginx.conf:/etc/nginx/nginx.conf"
      - "{{ bmc_proxy_cert_dir_path }}/server.pem:/etc/ssl/certs/server.pem"
      - "{{ bmc_proxy_cert_dir_path }}/server-key.pem:/etc/ssl/private/server-key.pem"
      - "{{ bmc_proxy_cert_dir_path }}/ca.pem:/etc/nginx/ca.pem"
    systemd_docker_ports:
      - host_port: "{{ bmc_reverse_proxy_port }}"
        target_port: 3333
    systemd_docker_host_to_ip_mapping:
      - host: bmc-proxy
        ip: "{{ bmc_proxy_docker_bridge_ip }}"
